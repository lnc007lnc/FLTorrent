# Edge server simulation image
# High performance, multi-GPU support

FROM nvidia/cuda:11.8-devel-ubuntu22.04

LABEL device.type="edge_server"
LABEL device.capability="high"
LABEL device.gpu.support="true"
LABEL gpu.architecture="cuda"

# Set working directory
WORKDIR /app

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Python environment
    python3 \
    python3-pip \
    python3-dev \
    # Build tools
    gcc \
    g++ \
    make \
    cmake \
    # Network tools
    iproute2 \
    net-tools \
    iputils-ping \
    iptables \
    # System tools
    curl \
    wget \
    git \
    htop \
    # CUDA development tools
    nvidia-cuda-toolkit \
    # High-performance computing libraries
    libblas-dev \
    liblapack-dev \
    libopenmpi-dev \
    # Clean cache
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set Python3 as default
RUN ln -s /usr/bin/python3 /usr/bin/python

# Upgrade pip
RUN python -m pip install --no-cache-dir --upgrade pip

# Install high-performance PyTorch (CUDA support)
RUN pip install --no-cache-dir \
    torch==2.1.0+cu118 \
    torchvision==0.16.0+cu118 \
    torchaudio==2.1.0+cu118 \
    --index-url https://download.pytorch.org/whl/cu118

# Install server-level AI libraries
RUN pip install --no-cache-dir \
    # Deep learning frameworks
    transformers \
    accelerate \
    # Distributed training
    torch-distributed \
    # Data processing
    numpy \
    pandas \
    scipy \
    scikit-learn \
    # Visualization
    matplotlib \
    seaborn \
    plotly \
    # Network optimization
    requests[socks] \
    # Monitoring tools
    psutil \
    gpustat

# Copy FederatedScope code
COPY . /app/

# Set permissions
RUN chmod +x /app/federatedscope/main.py

# Set device-specific environment variables
ENV DEVICE_TYPE="edge_server"
ENV GPU_AVAILABLE="true"
ENV MEMORY_LIMIT="32768"  # 32GB
ENV CPU_CORES="16"
ENV NETWORK_TYPE="Gigabit_Ethernet"

# CUDA optimization settings
ENV CUDA_VISIBLE_DEVICES="0,1,2,3"
ENV TORCH_CUDA_ARCH_LIST="7.0 7.5 8.0 8.6 8.9 9.0"
ENV NCCL_SOCKET_IFNAME="eth0"

# Performance optimization
ENV TORCH_NUM_THREADS="16"
ENV OMP_NUM_THREADS="16"
ENV MKL_NUM_THREADS="16"
ENV CUDA_LAUNCH_BLOCKING="0"

# Create necessary directories
RUN mkdir -p /app/data /app/logs /app/output /app/configs /app/models /app/checkpoints

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import torch; print('GPUs:', torch.cuda.device_count()); assert torch.cuda.is_available()" || exit 1

# Entry command
CMD ["python", "/app/federatedscope/main.py"]